{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-0581df2bc1141ae0f5905c32639f8dc057d98465",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/AemulaETHGlobal.sol": "project/contracts/AemulaETHGlobal.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/AemulaETHGlobal.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice minimal ERC20 interface for transfers\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n/// @title AemulaETHGlobal\n/// @notice subscriptions, article publication, and lightweight reactions with event indexing\ncontract AemulaETHGlobal {\n    /// -------------------------------------------------------------------------------------------\n    /// EVENTS\n    /// -------------------------------------------------------------------------------------------\n    // subscription events\n    event SubscriptionStarted(address indexed user, uint256 subscriptionExpiry);\n    event SubscriptionEnded(address indexed user);\n\n    // publication events\n    event ArticlePublished(address indexed author, string cid);\n    event ArticleRemoved(address indexed author, string cid);\n\n    // article interaction events\n    event ArticleSupported(address indexed user, string cid);\n    event ArticleDisagreed(address indexed user, string cid);\n\n    // author payout events\n    event AuthorPaid(address indexed author, uint256 amount);\n\n    // admin events\n    event AdminUpdated(address indexed admin, bool enabled);\n    event CommunityTreasuryUpdated(address indexed treasury);\n    event SubscriptionPriceUpdated(uint256 price);\n    event SubscriptionDurationUpdated(uint256 duration);\n\n    /// -------------------------------------------------------------------------------------------\n    /// STATE\n    /// -------------------------------------------------------------------------------------------\n    // users => subscription expiry (unix seconds) to keep track of subscriptions\n    mapping(address => uint256) public users;\n\n    // author => list of article CIDs (chronological append) to query articles by author\n    mapping(address => string[]) public authorArticles;\n\n    // cid => author who published it (address(0) if removed/not set) to quickly prove author\n    mapping(string => address) public articles;\n\n    // admin roles\n    mapping(address => bool) public admins;\n\n    // transfers - USDC and setting the community treasury wallet (holds subscription revenue)\n    IERC20 public immutable usdc;\n    address public communityTreasury;\n\n    // subscription economics that can be adjusted by admins\n    uint256 public subscriptionPrice = 10 * 1e6; // 10USDC (I think)\n    uint256 public subscriptionDuration = 30 days;\n\n    /// -------------------------------------------------------------------------------------------\n    /// MODIFIERS\n    /// -------------------------------------------------------------------------------------------\n    modifier onlyAdmin() {\n        require(admins[msg.sender], \"not admin\");\n        _;\n    }\n\n    modifier hasActiveSubscription(address user) {\n        require(users[user] > block.timestamp, \"subscription inactive\");\n        _;\n    }\n\n    /// -------------------------------------------------------------------------------------------\n    /// CONSTRUCTOR\n    /// -------------------------------------------------------------------------------------------\n    /// @param usdcToken address of USDC token\n    /// @param treasury initial community treasury address\n    constructor(address usdcToken, address treasury) {\n        require(usdcToken != address(0), \"usdc=0\");\n        require(treasury != address(0), \"treasury=0\");\n        usdc = IERC20(usdcToken);\n        communityTreasury = treasury;\n\n        admins[msg.sender] = true;\n        emit AdminUpdated(msg.sender, true);\n        emit CommunityTreasuryUpdated(treasury);\n        emit SubscriptionPriceUpdated(subscriptionPrice);\n        emit SubscriptionDurationUpdated(subscriptionDuration);\n    }\n\n    /// -------------------------------------------------------------------------------------------\n    /// ADMIN FUNCTIONS\n    /// -------------------------------------------------------------------------------------------\n    function setAdmin(address account, bool enabled) external onlyAdmin {\n        require(account != address(0), \"admin=0\");\n        admins[account] = enabled;\n        emit AdminUpdated(account, enabled);\n    }\n\n    function setCommunityTreasury(address treasury) external onlyAdmin {\n        require(treasury != address(0), \"treasury=0\");\n        communityTreasury = treasury;\n        emit CommunityTreasuryUpdated(treasury);\n    }\n\n    function setSubscriptionPrice(uint256 price) external onlyAdmin {\n        require(price > 0, \"price=0\");\n        subscriptionPrice = price;\n        emit SubscriptionPriceUpdated(price);\n    }\n\n    function setSubscriptionDuration(uint256 duration) external onlyAdmin {\n        require(duration > 0, \"duration=0\");\n        subscriptionDuration = duration;\n        emit SubscriptionDurationUpdated(duration);\n    }\n\n    /// -------------------------------------------------------------------------------------------\n    /// SUBSCRIPTION FUNCTIONS\n    /// -------------------------------------------------------------------------------------------\n    /// @notice Start a subscription. Requires the caller to be expired or new.\n    /// Transfers `subscriptionPrice` USDC from caller to `communityTreasury`.\n    /// Caller must approve this contract for `subscriptionPrice` beforehand.\n    function startSubscription() external {\n        require(users[msg.sender] <= block.timestamp, \"already active\");\n        require(communityTreasury != address(0), \"treasury unset\");\n\n        // pull USDC to communityTreasury wallet\n        bool ok = usdc.transferFrom(msg.sender, communityTreasury, subscriptionPrice);\n        require(ok, \"USDC transferFrom failed\");\n\n        uint256 expiry = block.timestamp + subscriptionDuration;\n        users[msg.sender] = expiry;\n\n        emit SubscriptionStarted(msg.sender, expiry);\n    }\n\n    /// @notice End a subscription early. Marks expiry as current timestamp.\n    function endSubscription() external {\n        require(users[msg.sender] > block.timestamp, \"not active\");\n        users[msg.sender] = block.timestamp;\n        emit SubscriptionEnded(msg.sender);\n    }\n\n    /// @notice Check if a user has an active subscription.\n    function isActive(address user) external view returns (bool) {\n        return users[user] > block.timestamp;\n    }\n\n    /// -------------------------------------------------------------------------------------------\n    /// ARTICLE PUBLISHING FUNCTIONS\n    /// -------------------------------------------------------------------------------------------\n    /// @notice Publish an article by CID. Requires active subscription.\n    function publishArticle(string calldata cid) external hasActiveSubscription(msg.sender) {\n        require(bytes(cid).length > 0, \"cid empty\");\n        require(articles[cid] == address(0), \"cid exists\");\n\n        // write the article to the respective mappings\n        articles[cid] = msg.sender;\n        authorArticles[msg.sender].push(cid);\n\n        emit ArticlePublished(msg.sender, cid);\n    }\n\n    /// @notice Remove an article you authored. Leaves a gap in arrays to preserve chronology.\n    function removeArticle(string calldata cid) external {\n        require(bytes(cid).length > 0, \"cid empty\");\n        \n        // make sure the sender is the author\n        address author = articles[cid];\n        require(author != address(0), \"cid not found\");\n        require(author == msg.sender, \"not author\");\n\n        // remove author of article to clear ownership\n        articles[cid] = address(0);\n\n        // soft-delete in authorArticles array (preserve order for off-chain queries)\n        // don't need to worry about cleaning up state for this project, but would in production\n        string[] storage arr = authorArticles[msg.sender];\n        for (uint256 i = 0; i < arr.length; i++) {\n            if (keccak256(bytes(arr[i])) == keccak256(bytes(cid))) {\n                arr[i] = \"\"; // mark deleted; clients should filter empty strings\n                break;\n            }\n        }\n\n        emit ArticleRemoved(msg.sender, cid);\n    }\n\n    /// -------------------------------------------------------------------------------------------\n    /// ARTICLE INTERACTION FUNCTIONS\n    /// -------------------------------------------------------------------------------------------\n    /// @notice Support an article. Requires active subscription.\n    function support(string calldata cid) external hasActiveSubscription(msg.sender) {\n        require(articles[cid] != address(0), \"cid not found\");\n        emit ArticleSupported(msg.sender, cid);\n    }\n\n    /// @notice Disagree with an article. Requires active subscription.\n    function disagree(string calldata cid) external hasActiveSubscription(msg.sender) {\n        require(articles[cid] != address(0), \"cid not found\");\n        emit ArticleDisagreed(msg.sender, cid);\n    }\n\n    /// -------------------------------------------------------------------------------------------\n    /// AUTHOR PAYOUT FUNCTIONS\n    /// -------------------------------------------------------------------------------------------\n    /// @notice Pay an author USDC from the community treasury (which must approve this contract).\n    /// Admin-only. Does not hold funds in this contract.\n    function payAuthor(address author, uint256 amount) external onlyAdmin {\n        require(author != address(0), \"author=0\");\n        require(amount > 0, \"amount=0\");\n        require(communityTreasury != address(0), \"treasury unset\");\n\n        bool ok = usdc.transferFrom(communityTreasury, author, amount);\n        require(ok, \"USDC transferFrom failed\");\n\n        emit AuthorPaid(author, amount);\n    }\n}"
      }
    }
  }
}